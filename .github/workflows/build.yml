name: Build Engines

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit on the given branch to build"
        required: false
jobs:
  build-linux:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    env:
      # default build config
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          # Linux Glibc rhel [rhel] https://github.com/steebchen/prisma-client-go/issues/1107
          # - name: "rhel-openssl-1.0.x"
          #   image: 'prismagraphql/build:rhel-libssl1.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # - name: "rhel-openssl-1.1.x"
          #   image: 'prismagraphql/build:rhel-libssl1.1.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # - name: "rhel-openssl-3.0.x"
          #   image: 'prismagraphql/build:rhel-libssl3.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # Linux Glibc debian [debian]
          # - name: "debian-openssl-1.0.x"
          #   image: 'prismagraphql/build:debian-libssl1.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # - name: "debian-openssl-1.1.x"
          #   image: 'prismagraphql/build:debian-libssl1.1.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # - name: "debian-openssl-3.0.x"
          #   image: 'prismagraphql/build:debian-libssl3.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # # Linux Musl musl [linux-musl]
          # - name: "linux-musl-openssl-1.1.x"
          #   image: 'prismagraphql/build:alpine-libssl1.1.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          # - name: "linux-musl-openssl-3.0.x"
          #   image: 'prismagraphql/build:alpine-libssl3.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: '--features vendored-openssl'
          - name: "linux-arm64"
            image: 'prismagraphql/build:linux-static-arm64'
            target_string: '--target aarch64-unknown-linux-musl'
            target_path: 'aarch64-unknown-linux-musl'
            features_string: '--features vendored-openssl'
          # Linux Static [linux-static]
          - name: "linux-amd64"
            image: 'prismagraphql/build:linux-static-x64'
            target_string: '--target x86_64-unknown-linux-musl'
            target_path: 'x86_64-unknown-linux-musl'
            features_string: '--features vendored-openssl'
          # Linux Arm64 Glibc [linux-arm64]
          # - name: "linux-arm64-openssl-1.0.x"
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-1.0.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: '--features vendored-openssl'
          # - name: "linux-arm64-openssl-1.1.x"
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-1.1.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: '--features vendored-openssl'
          # - name: "linux-arm64-openssl-3.0.x"
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-3.0.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: '--features vendored-openssl'
          # Linux Arm64 Musl [linux-musl-arm64]
          # - name: "linux-musl-arm64-openssl-1.1.x"
          #   image: 'prismagraphql/build:cross-linux-musl-arm-ssl-1.1.x'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: '--features vendored-openssl'
          # - name: "linux-musl-arm64-openssl-3.0.x"
          #   image: 'prismagraphql/build:cross-linux-musl-arm-ssl-3.0.x'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: '--features vendored-openssl'
          # Linux Arm64 Static [linux-static-arm64]
          # - name: "linux-static-arm64"
          #   image: 'prismagraphql/build:linux-static-arm64'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: '--features vendored-openssl'
    steps:
      - name: Output link to real commit
        if: ${{ github.event.inputs.commit }}
        run: echo https://github.com/${{ github.repository }}/prisma-engines/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          # repository: prisma/prisma-engines
          ref: ${{ github.event.inputs.commit }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.67.0
          override: true
          default: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Construct Build Command
        id: construct_build_command
        env:
          TARGET_NAME: ${{ matrix.target.name }}
          IMAGE: ${{ matrix.target.image }}
          TARGET_STRING: ${{ matrix.target.target_string }}
          FEATURES_STRING: ${{ matrix.target.features_string }}
        run: |
          command="docker run \
            -e SQLITE_MAX_VARIABLE_NUMBER=250000 \
            -e SQLITE_MAX_EXPR_DEPTH=10000 \
            -e LIBZ_SYS_STATIC=1 \
            -w /root/build \
            -v \"$(pwd)\":/root/build \
            $IMAGE \
            bash -c \
              \" \
              rustup toolchain install 1.67.0 \
              && rustup default 1.67.0 \
              && cargo clean \
              && cargo build --release -p query-engine          --manifest-path query-engine/query-engine/Cargo.toml          $TARGET_STRING $FEATURES_STRING \
              && cargo build --release -p schema-engine-cli     --manifest-path schema-engine/cli/Cargo.toml                  $TARGET_STRING $FEATURES_STRING \
              \" \
            "
          if [[ -n "$TARGET_STRING" ]]; then
            command=$(echo "$command" | sed "s|rustup default 1.67.0|rustup default 1.67.0 \&\& rustup target add $(echo $TARGET_STRING | awk '{print $NF}')|")
          fi
          echo "COMMAND=$command" >> "$GITHUB_OUTPUT"
      - name: Show Build Command
        env:
          COMMAND: ${{ steps.construct_build_command.outputs.COMMAND }}"
        run: echo "Build command is $COMMAND"

      - name: Execute Build command
        run:  ${{ steps.construct_build_command.outputs.command }}

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target.target_path == '' }}
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/release/schema-engine
            # ${{ github.workspace }}/target/release/query-engine
            # ${{ github.workspace }}/target/release/prisma-fmt
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target.target_path != '' }}
        with:
          name: ${{ matrix.target.name }}
          path: |
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt
  build-darwin:
    name: "${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})"
    env:
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000
      # minimum supported version of macOS
      # MACOSX_DEPLOYMENT_TARGET: 10.15
    runs-on: macos-13

    strategy:
      matrix:
        target:
          - name: "darwin-amd64"
            target_string: ''
            target_path: ''
          - name: "darwin-arm64"
            target_string: '--target aarch64-apple-darwin'
            target_path: 'aarch64-apple-darwin'

    steps:
      - name: Output link to real commit
        run: echo ${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Install aarch64 toolchain
        if: ${{ matrix.target.name == 'darwin-arm64' }}
        run: |
          rustup target add aarch64-apple-darwin
          xcodebuild -showsdks
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-intel-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: |
          cargo build --release -p query-engine -p schema-engine-cli ${{ matrix.target.target_string }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            # ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
  build-windows:
    name: "Windows engines build on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }}"
    env:
      SQLITE_MAX_VARIABLE_NUMBER: 250000
      SQLITE_MAX_EXPR_DEPTH: 10000
      RUSTFLAGS: "-C target-feature=+crt-static"
    runs-on: windows-latest

    steps:
      - name: Output link to real commit
        run: echo ${{ github.repository }}/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: cargo build --release

      - uses: actions/upload-artifact@v3
        with:
          name: windows
          path: |
            ${{ github.workspace }}/target/release/schema-engine.exe
            ${{ github.workspace }}/target/release/schema-engine.dll